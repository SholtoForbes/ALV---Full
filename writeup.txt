ALV-2 Trajectory Optimisation Program

created by Sholto Forbes-Spyratos in Octave


This program optimises the trajectory of the ALV-2 over all three stages using a single shooting method, solved in an SQP solver.





Single Shooting Method

The single shooting method is the simplest optimal control technique. The single shooting method discretises the controls into defined segments, 
and numerically integrates the ALV-2 dynamics using these controls as inputs. These controls are then modified until an optimal trajectory is found. 
The simplest example of the shooting method is maximising the distance of a cannon ball by selecting the optimal shooting angle! This would be a single shooting method with 
only 1 control input, whereas rocket control requires many as the control must change over time.  

Image takes from slides by Moritz Diehl, can be found as first result by googling 'single shooting diehl'.

Solving for multiple control inputs becomes very complicated, and is carried out by a Sequential Quadratic Programming solver, which is a standard solver in most programming languages. Sequential Quadratic Programming (SQP)
is a generic process by which a system can be optimised, by minimising a certain function f(x) subject to a set of controls u(x) and constraints g(x) = 0 and h(x)>=0. 
For a single shooting approach, SQP provides the maximum velocity attainable at orbit by selecting an optimal range of discretised controls, subject to the dynamics of the ALV-2 system. 






 The Program


The optimisation program will find a sequence of angle of attack values at discrete timepoints to reach a given altitude, at 0 degree trajectory inclination, with maximum velocity. Note that this does not 
mean that the ALV-2 will necessarily achieve orbital velocity! 
These angle of attack values are transitioned between using linear tangent guidance.

Inputs:
Launch Location
Target Altitude
2nd, 3rd Stage Node Spacing - This is the separation of the nodes of discretised control. ie. the control will be constant for time intervals of this length (see Single Shooting Method). 
				Making this smaller will result in higher accuracy, but longer computation time. Numerical instability can result from having this be too small OR too large! But there is no hard and fast rule to follow, if in doubt leave the default values.
Prepitch Time - The time of flight before pitching (s)
Pitchover Angle - Specified pitch angle (deg)
Guess - Initial guess of pitch change rate to provide to the SQP solver, 'Auto' will run a range of constant pitch change rates and choose the end result closest to the desired altitude as an initial guess
NOTE: if your guess is too wrong, the solver may be forced into a local minimum which will give a nonsensical solution (it is also possible that the auto guess function may cause this in some cases). If the solution is nonsensical pick a sensible guess, which you can check using the first simulated end altitude. 
Pitchover Angle Optimisation YES/NO - choose if pitchover angle is implemented. If YES values between 1 and 5 degrees pitchover angle will be tested in 0.5 degree increments, and the best end velocity chosen. This is very time consuming due to the lack of parallel capability of Octave (in windows there is none at all). 

During the program runtime, the current stage of simulation will be printed, along with the altitude achieved at the end of each simulation step, which will slowly converge on the target altitude. 
This will most of the time be repeated values and may jump up or down drastically, this is normal for an SQP optimiser.


Outputs:
the matrix StageDynamics will be created, which contains, by column
height (above earth) (m)
velocity (m/s)
mass (kg)
flight path angle (rad)
angle of attack (rad)
longitude (rad)
latitude (rad)
heading angle (rad)

A plot will be generated, as well as p, the polynomial fit of the pitch angle (angle of attack + flight path angle) and gammadot1, the pitching rate of the first stage after pitchover.

Common errors:

- The SQP colver throws an error due to an infeasible QP subproblem. This means that the initial guess put the SQP solver in a hard to solve position, and Octave does not deal well with this (seems like a known deficiency). A change in initial guess, manually input, may work. 
- Solver converges to an obviously wrong solution. Initial guess is bad, or the problem is not well defined ie. the dynamics of the system are somehow illogical or the rocket cannot reach the desired end point. 